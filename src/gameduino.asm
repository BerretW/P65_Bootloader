;
; File generated by cc65 v 2.19 - Git a861d84
;
	.fopt		compiler,"cc65 v 2.19 - Git a861d84"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_GD_Begin
	.export		_GD_Init
	.export		_GD_xhide
	.export		___start
	.export		___wstart
	.export		___end
	.export		_GD_rd
	.export		_GD_wr
	.export		_GD_fill
	.export		_GD_wr16
	.export		_GD_rd16
	.export		_GD_putstr
	.export		_GD_putchar
	.export		_GD_sprite
	.export		_GD_setpal
	.export		_GD_copy
	.import		_spi_write_16_addr
	.import		_spi_write_16_data
	.import		_spi_write
	.import		_spi_begin
	.import		_spi_end
	.import		_spi_init
	.import		_spi_read
	.export		_spr
	.export _GD_print_char
	.export _GD_print
	.export _GD_WR_8

.include "macros_65C02.inc65"
.segment	"DATA"

.segment "ZEROPAGE"
_posx: .res 1,$00
_posy: .res 1,$00
.segment	"BSS"

_spr:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ GD_Begin (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_Begin: near

.segment	"CODE"

	lda     #$0E
	jmp     _spi_begin

.endproc

; ---------------------------------------------------------------
; void __near__ GD_Init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_Init: near

.segment	"CODE"
	STZ _posx
	STZ _posy
	jsr     _spi_init
	RTS

	jsr     decsp2
	ldx     #$28
	lda     #$09
	jsr     pushax
	lda     #$01
	jsr     _GD_wr
	ldx     #$30
	lda     #$00
	jsr     ___wstart
	ldx     #$00
	txa
	jsr     stax0sp
L0002:	jsr     ldax0sp
	cmp     #$00
	txa
	sbc     #$02
	bvc     L0006
	eor     #$80
L0006:	bpl     L0003
	jsr     _GD_xhide
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0002
L0003:	jsr     ___end
	jsr     push0
	jsr     pusha
	ldx     #$0F
	lda     #$FF
	jsr     _GD_fill
	ldx     #$38
	lda     #$00
	jsr     pushax
	jsr     pusha
	ldx     #$1F
	dea
	jsr     _GD_fill
	ldx     #$40
	lda     #$00
	jsr     pushax
	jsr     pusha
	dex
	dea
	jsr     _GD_fill
	ldx     #$2A
	lda     #$00
	jsr     pushax
	jsr     pusha
	ldx     #$01
	jsr     _GD_fill
	ldx     #$28
	lda     #$40
	jsr     pushax
	lda     #$00
	jsr     pusha
	tax
	lda     #$80
	jsr     _GD_fill
	ldx     #$28
	lda     #$04
	jsr     pushax
	ldx     #$00
	txa
	jsr     _GD_wr16
	ldx     #$28
	lda     #$06
	jsr     pushax
	ldx     #$00
	txa
	jsr     _GD_wr16
	ldx     #$28
	lda     #$08
	jsr     pushax
	lda     #$00
	jsr     _GD_wr
	ldx     #$28
	lda     #$0A
	jsr     pushax
	lda     #$00
	jsr     _GD_wr
	ldx     #$28
	lda     #$0B
	jsr     pushax
	lda     #$00
	jsr     _GD_wr
	ldx     #$28
	lda     #$0C
	jsr     pushax
	lda     #$00
	jsr     _GD_wr
	ldx     #$28
	lda     #$0E
	jsr     pushax
	ldx     #$00
	txa
	jsr     _GD_wr16
	ldx     #$28
	lda     #$10
	jsr     pushax
	ldx     #$00
	txa
	jsr     _GD_wr16
	ldx     #$28
	lda     #$12
	jsr     pushax
	ldx     #$00
	txa
	jsr     _GD_wr16
	ldx     #$28
	lda     #$1E
	jsr     pushax
	ldx     #$00
	txa
	jsr     _GD_wr16
	ldx     #$28
	lda     #$14
	jsr     pushax
	lda     #$40
	jsr     _GD_wr
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ GD_xhide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_xhide: near

.segment	"CODE"

	ldx     #$01
	lda     #$90
	jsr     _spi_write_16_data
	inc     _spr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __start (unsigned int addr)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	___start: near

.segment	"CODE"

	jsr     pushax
	lda     #$0E
	jsr     _spi_begin
	jsr     ldax0sp
	jsr     _spi_write_16_addr
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __wstart (unsigned int addr)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	___wstart: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	pha
	txa
	ora     #$80
	tax
	pla
	jsr     ___start
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __end (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	___end: near

.segment	"CODE"

	jmp     _spi_end

.endproc

; ---------------------------------------------------------------
; char __near__ GD_rd (unsigned int addr)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_rd: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	ldy     #$02
	jsr     ldaxysp
	jsr     ___start
	lda     #$00
	jsr     _spi_read
	sta     (sp)
	jsr     ___end
	ldx     #$00
	lda     (sp)
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ GD_wr (unsigned int addr, char v)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_wr: near

.segment	"CODE"

	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	jsr     ___wstart
	lda     (sp)
	jsr     _spi_write
	jsr     ___end
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ GD_fill (unsigned int addr, char v, unsigned int count)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_fill: near

.segment	"CODE"

	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     ___wstart
	bra     L0004
L0002:	ldy     #$02
	lda     (sp),y
	jsr     _spi_write
L0004:	jsr     ldax0sp
	stx     tmp1
	ora     tmp1
	php
	ldx     #$00
	lda     #$01
	jsr     subeq0sp
	plp
	bne     L0002
	jsr     ___end
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ GD_wr16 (unsigned int addr, unsigned int v)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_wr16: near

.segment	"CODE"

	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     ___wstart
	jsr     ldax0sp
	jsr     _spi_write_16_data
	jsr     ___end
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ GD_rd16 (unsigned int addr)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_rd16: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	ldy     #$02
	jsr     ldaxysp
	jsr     ___start
	lda     #$00
	jsr     _spi_read
	sta     (sp)
	lda     (sp)
	jsr     pusha0
	lda     #$00
	jsr     _spi_read
	tax
	lda     #$00
	jsr     tosorax
	sta     (sp)
	jsr     ___end
	ldx     #$00
	lda     (sp)
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ GD_putstr (char x, char y, const char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_putstr: near

.segment	"CODE"

	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	jsr     aslax2
	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0005
	inx
L0005:	jsr     ___wstart
	bra     L0004
L0002:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	pha
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	pla
	jsr     _spi_write
L0004:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L0002
	jsr     ___end
	jmp     incsp4

.endproc


; ---------------------------------------------------------------
; void GD_wr_8(char * addr, char data)
; in X = Hibyte of address
; in A = Lobyte of address
; in ptr1 = data to write
; ---------------------------------------------------------------
_GD_WR_8: 	TAY
						LDA #14
						JSR _spi_begin
						TYA
						JSR _spi_write_16_addr
					 	LDA ptr1
						JSR _spi_write
						JSR _spi_end
						RTS


; ---------------------------------------------------------------
; void GD_putchar (char c)
; Put character at cursor position
; in X = position at x
; in Y = position at y
; in A = Char to print
; if Z = 1 then exit
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_putchar: near

.segment	"CODE"
							PHA
							PLA
							BEQ @end
							clc
							CLD

							PHA
							LDA #14
							JSR _spi_begin

							TYA
							PHA
							AND #$FC
							;CLC
							ROR
							ROR
							ADC #$80
							JSR _spi_write
							PLA
							AND #$3
							ROL
							ROL
							ROL
							ROL
							ROL
							ROL
							STA ptr1
							TXA
							AND #$3F
							ADC ptr1
							JSR _spi_write
							PLA
							JSR _spi_write
							JSR _spi_end
@end:					RTS

.endproc

; ---------------------------------------------------------------
; void get_cursor_pos ()
; out X = position of cursor at x 0 - 49
; out Y = position of cursor at y 0 - 36
;
; ---------------------------------------------------------------
_get_cursor_pos: 	LDX _posx
									LDY _posy
									RTS


; ---------------------------------------------------------------
; void GD_print_char()
; in A = char to print
; ---------------------------------------------------------------
_GD_print: 				PHA
									JSR _check_char
_GD_print_char:		JSR _get_cursor_pos
									JSR _GD_putchar
									JSR _GD_next_pos
									PLA
									RTS

; --------------------------------------------------------------
; void _check_char
; check if in A is printable character, if not then set Z = 1
; --------------------------------------------------------------
_check_char:
							BEQ @end
							CMP #$94
							BEQ @left
							CMP #$96
							BEQ @right
							CMP #$98
							BEQ @up
							CMP #$92
							BEQ @down
							CMP #$08
							BEQ @bksp
							RTS

@left:				JSR _GD_prev_pos
							LDA #$0
							RTS

@right:				RTS
@up:					RTS
@down:				RTS
@del:					RTS
@ent:					RTS
@bksp:				JSR _GD_prev_pos
							LDA #$20
							JSR _get_cursor_pos
							JSR _GD_putchar
							LDA #0
							RTS
@end:					RTS
; --------------------------------------------------------------
; void GD_prev_pos()
; update position of cursor by 1 character left
; --------------------------------------------------------------
_GD_prev_pos:	LDX _posx
							BNE @_decx
							LDX #50
							STX _posx
							DEC _posy
@_decx:				DEX
							STX _posx
							RTS

; ---------------------------------------------------------------
; void GD_next_pos ()
; update position of cursor by 1 character right
; ---------------------------------------------------------------
_GD_next_pos:

							LDX _posx
							LDY _posy
							PHA
							PLA
							BEQ @end
							INX
							CPX #50
							BNE @end
							LDX #0
							STX _posx
							INY
							CPY #37
							BNE @end
							LDY #0
							STY _posy
@end:					STX _posx
							STY _posy
							RTS

; ---------------------------------------------------------------
; void __near__ GD_sprite (char spr, int x, int y, char image, char palette, char rot, char jk)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_sprite: near

.segment	"CODE"

	jsr     pusha
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	sta     ptr1
	stx     ptr1+1
	clc
	lda     ptr1
	pha
	lda     #$30
	adc     ptr1+1
	tax
	pla
	jsr     ___wstart
	ldy     #$02
	lda     (sp),y
	tax
	lda     #$00
	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	dey
	lda     (sp),y
	tax
	lda     #$00
	jsr     aslax1
	ora     ptr1
	sta     ptr1
	txa
	ora     ptr1+1
	sta     ptr1+1
	ldy     #$07
	jsr     ldaxysp
	ora     ptr1
	pha
	txa
	ora     ptr1+1
	tax
	pla
	jsr     _spi_write_16_data
	lda     (sp)
	tax
	lda     #$00
	jsr     aslax4
	jsr     aslax3
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	tax
	lda     #$00
	jsr     aslax1
	ora     ptr1
	sta     ptr1
	txa
	ora     ptr1+1
	sta     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	ora     ptr1
	pha
	txa
	ora     ptr1+1
	tax
	pla
	jsr     _spi_write_16_data
	jsr     ___end
	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ GD_setpal (char pal, unsigned int rgb)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_setpal: near

.segment	"CODE"

	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0002
	inx
L0002:	sta     ptr1
	stx     ptr1+1
	clc
	lda     ptr1
	pha
	lda     #$20
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _GD_wr16
	jmp     incsp3

.endproc



; ---------------------------------------------------------------
; void __near__ GD_copy (unsigned int addr, char *src, int count)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GD_copy: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	ldy     #$07
	jsr     ldaxysp
	jsr     ___wstart
	bra     L0004
L0002:	jsr     ldax0sp
	clc
	ldy     #$04
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	jsr     _spi_write
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
L0004:	ldx     #$00
	lda     #$01
	ldy     #$02
	jsr     subeqysp
	stx     tmp1
	ora     tmp1
	bne     L0002
	jsr     ___end
	jmp     incsp8

.endproc
